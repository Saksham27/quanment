{"version":3,"sources":["assests/hot_inactive.svg","assests/beaker_inactive.svg","assests/scale.svg","assests/scale_inactive.svg","assests/hot.svg","assests/beaker.svg","serviceWorker.js","services/history.js","components/TopBar/TopBar.jsx","components/CoversionType/CoversionType.jsx","services/axios_service.js","config/config.js","components/Conversionform/ConversionForm.jsx","components/Home/Home.jsx","components/History/History.jsx","services/routes.js","index.js"],"names":["module","exports","Boolean","window","location","hostname","match","history","TopBar","props","className","onClick","push","CoversionType","type","this","styleName","onMouseEnter","enter","onMouseLeave","exit","click","src","image","alt","children","Component","AxiosService","url","data","axios","post","get","delete","Config","ConversionForm","onChangeFirst","e","setState","firstSelectValue","target","value","convert","onChangeSecond","secondSelectValue","onChangeInput","numberValue","a","unitVal","String","state","inputValue","Value","OperationType","config","json","console","log","resultValue","result","options","prevProps","htmlFor","id","name","onChange","event","required","style","map","option","index","key","toString","readOnly","lengthOption","tempOption","volumeOption","Home","useState","optionsVal","setOptions","scale","lengthBackground","setLengthBackground","lengthClicked","setLengthclicked","lengthStyle","setLengthStyle","hotInactive","tempBackground","setTempBackground","tempClicked","setTempclicked","tempStyle","setTempStyle","beakerInactive","volumeBackground","setVolumeBackground","volumeClicked","setVolumeclicked","volumeStyle","setVolumeStyle","formStyle","setFormStyle","scaleInactive","hot","beaker","useEffect","History","getAll","then","catch","err","temparray","onCheck","Number","isChecked","arr","inputData","deleteMultiple","success","d","operationType","routes","path","exact","component","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.4aaaed03.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/hot_inactive.68ef5287.svg\";","module.exports = __webpack_public_path__ + \"static/media/beaker_inactive.741ab4aa.svg\";","module.exports = __webpack_public_path__ + \"static/media/scale.55317149.svg\";","module.exports = __webpack_public_path__ + \"static/media/scale_inactive.6bae66d0.svg\";","module.exports = __webpack_public_path__ + \"static/media/hot.73b39610.svg\";","module.exports = __webpack_public_path__ + \"static/media/beaker.c824fced.svg\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { createBrowserHistory as history } from 'history';\r\n\r\nexport default history();","import React from 'react'\r\nimport history from './../../services/history'\r\n\r\n// css import\r\nimport './TopBar.scss'\r\n\r\nfunction TopBar(props) {\r\n    return (\r\n        <div className='container'>\r\n            <div className='quantment' onClick={() => history.push('./quanment')}>Quantment</div>\r\n            <div />\r\n            <div className=\"history\" onClick={() => history.push('./History')}>History</div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TopBar\r\n\r\n","import React, { Component } from 'react'\r\nimport './CoversionType.scss'\r\n\r\nexport default class CoversionType extends Component {\r\n\r\n    render() {\r\n        return (\r\n            <button\r\n                type=\"button\"\r\n                className={`conversion-box ${this.props.styleName}`}\r\n                onMouseEnter={this.props.enter}\r\n                onMouseLeave={this.props.exit}\r\n                onClick={this.props.click}\r\n                >\r\n                <img src={this.props.image} alt='type'></img>\r\n                <span>{this.props.children}</span>\r\n            </button>\r\n        )\r\n    }\r\n}\r\n","import axios from 'axios'\r\n\r\nexport default class AxiosService {\r\n    \r\n    post(url,data){\r\n        return axios.post(url,data);\r\n    }\r\n\r\n    getAll(url){\r\n        return axios.get(url);\r\n    }\r\n\r\n    deleteMultiple(url,data){\r\n        return axios.delete(url,{data});\r\n    }\r\n}\r\n\r\n","export default class Config {\r\n    static url= \"https://localhost:5001/api/quantityMeasurement/conversion\";\r\n}","import React, { Component } from 'react'\r\nimport './ConversionForm.scss'\r\nimport AxiosService from './../../services/axios_service'\r\nimport config from './../../config/config'\r\n\r\nconst axios = new AxiosService();\r\n\r\nexport class ConversionForm extends Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n\r\n\r\n        this.state = {\r\n            numberValue: 1,\r\n            resultValue: 0.08,\r\n            firstSelectValue: this.props.options[0],\r\n            secondSelectValue: this.props.options[1]\r\n        }\r\n\r\n\r\n    }\r\n\r\n    onChangeFirst = (e) => {\r\n        this.setState({ firstSelectValue: e.target.value }, () => this.convert())\r\n\r\n    }\r\n    onChangeSecond = (e) => {\r\n        this.setState({ secondSelectValue: e.target.value }, () => this.convert());\r\n\r\n    }\r\n\r\n    onChangeInput = (e) => {\r\n        this.setState({ numberValue: e.target.value }, () => this.convert());\r\n    }\r\n\r\n\r\n    convert = async () => {\r\n\r\n        let unitVal = `${String(this.state.firstSelectValue)}To${String(this.state.secondSelectValue)}`;\r\n\r\n        let inputValue = {\r\n            Value: this.state.numberValue,\r\n            OperationType: unitVal\r\n        }\r\n\r\n        try {\r\n            const json = await axios.post(config.url, inputValue);\r\n            // console.log();\r\n            if (json.data.data[0]) {\r\n                console.log('convertion success');\r\n\r\n                this.setState({ resultValue: json.data.data[0].result });\r\n            } else {\r\n                this.setState({ resultValue: 0 });\r\n            }\r\n\r\n        }\r\n        catch (err) {\r\n            console.log(err);\r\n        }\r\n\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (prevProps.options !== this.props.options) {\r\n            console.log(\"changed\");\r\n\r\n            this.setState({\r\n                firstSelectValue: this.props.options[0],\r\n                secondSelectValue: this.props.options[1],\r\n            });\r\n\r\n            if (this.props.options[0] === 'Inch') {\r\n                this.setState({\r\n                    numberValue: 1,\r\n                    resultValue: 0.08\r\n                })\r\n            }\r\n            if (this.props.options[0] === 'C') {\r\n                this.setState({\r\n                    numberValue: 0,\r\n                    resultValue: 32\r\n                })\r\n            }\r\n            if (this.props.options[0] === 'Ml') {\r\n                this.setState({\r\n                    numberValue: 1,\r\n                    resultValue: 0.001\r\n                })\r\n            }\r\n        }\r\n    }\r\n    render() {\r\n\r\n        const value = this.props.options;\r\n\r\n\r\n        return (\r\n            <div>\r\n                <form className='conversionForm-container'>\r\n                    <div className='conversionForm-container--from'>\r\n                        <label htmlFor=\"from\">From</label>\r\n                        <input type=\"number\" id=\"from_input\" name=\"form_input\" onChange={(event) => this.onChangeInput(event)} value={this.state.numberValue} required></input>\r\n                        <select id=\"from\" name=\"from\" onChange={(event) => this.onChangeFirst(event)} className={this.props.style} value={this.state.firstSelectValue}>\r\n                            {\r\n                                value.map((option, index) => {\r\n\r\n                                    return <option key={index.toString()} value={option}>{option}</option>\r\n                                })\r\n                            }\r\n\r\n                        </select>\r\n                    </div>\r\n                    <div className='conversionForm-container--to'>\r\n                        <label htmlFor=\"to\">To</label>\r\n                        <input type=\"number\" id=\"from_input\" name=\"form_input\" value={this.state.resultValue} readOnly className={this.props.style}></input>\r\n                        <select id=\"to\" name=\"to\" onChange={this.onChangeSecond} className={this.props.style} value={this.state.secondSelectValue}>\r\n                            {\r\n                                value.map((option, index) => {\r\n                                    return <option key={index.toString()} value={option} >{option}</option>\r\n                                })\r\n                            }\r\n                        </select>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ConversionForm\r\n","import React, { useState, useEffect } from 'react'\r\n\r\n// Componenet imports\r\nimport TopBar from '../TopBar/TopBar'\r\nimport ConversionType from './../CoversionType/CoversionType'\r\nimport ConversionForm from '../Conversionform/ConversionForm'\r\n\r\n// Css and assets import\r\nimport './Home.scss'\r\nimport hot from './../../assests/hot.svg'\r\nimport hotInactive from './../../assests/hot_inactive.svg'\r\nimport beaker from './../../assests/beaker.svg'\r\nimport beakerInactive from './../../assests/beaker_inactive.svg'\r\nimport scale from './../../assests/scale.svg'\r\nimport scaleInactive from './../../assests/scale_inactive.svg'\r\n\r\n// Constant arrayes for Setting conversion options\r\nconst lengthOption = ['Inch', 'Feet', 'Yard'];\r\nconst tempOption = ['C', 'F'];\r\nconst volumeOption = ['Ml', 'Litre'];\r\n\r\n// Fucntional componeent * Home *\r\nconst Home = props => {\r\n\r\n    // setting inital states -----------------------------\r\n\r\n    // state for converison units\r\n    let [optionsVal, setOptions] = useState(lengthOption)\r\n\r\n    // state for Length conversion type - Background Image, clicked state, applied style based on state\r\n    const [lengthBackground, setLengthBackground] = useState(scale)\r\n    const [lengthClicked, setLengthclicked] = useState(true)\r\n    const [lengthStyle, setLengthStyle] = useState('length-active')\r\n\r\n    // state for Temperature conversion type - Background Image, clicked state, applied style based on state\r\n    const [tempBackground, setTempBackground] = useState(hotInactive)\r\n    const [tempClicked, setTempclicked] = useState(false)\r\n    const [tempStyle, setTempStyle] = useState('temp')\r\n\r\n    // state for Volume conversion type - Background Image, clicked state, applied style based on state\r\n    const [volumeBackground, setVolumeBackground] = useState(beakerInactive)\r\n    const [volumeClicked, setVolumeclicked] = useState(false)\r\n    const [volumeStyle, setVolumeStyle] = useState('volume')\r\n    let [formStyle, setFormStyle] = useState('lengthUnits')\r\n\r\n    // Method to change background image state of Length button when mouse enters\r\n    const hoverLengthEnter = () => {\r\n        setLengthBackground(scale);\r\n    }\r\n\r\n    // Method to change background image state of Length button when mouse exits\r\n    const hoverLengthExit = () => {\r\n        if (lengthClicked === false) {\r\n            setLengthBackground(scaleInactive)\r\n        }\r\n    }\r\n\r\n    // Method to manipulates diffrent states of Length, Temperature, Volume button when clicked on Length button\r\n    const clickLength = () => {\r\n        setLengthBackground(scale);\r\n        setTempBackground(hotInactive);\r\n        setVolumeBackground(beakerInactive);\r\n\r\n        setLengthclicked(true);\r\n        setTempclicked(false);\r\n        setVolumeclicked(false);\r\n\r\n        setLengthStyle('length-active');\r\n        setVolumeStyle('volume');\r\n        setTempStyle('temp');\r\n\r\n        setFormStyle('lengthUnits');\r\n    };\r\n\r\n    // Method to change background image state of Temperature button when mouse enters\r\n    const hoverTempEnter = () => {\r\n        setTempBackground(hot);\r\n    }\r\n\r\n    // Method to change background image state of Temperature button when mouse exits\r\n    const hoverTempExit = () => {\r\n        if (tempClicked === false) {\r\n            setTempBackground(hotInactive)\r\n        }\r\n    }\r\n\r\n    // Method to manipulates diffrent states of Length, Temperature, Volume button when clicked on Temperature button\r\n    const clickTemp = () => {\r\n        setLengthBackground(scaleInactive);\r\n        setTempBackground(hot);\r\n        setVolumeBackground(beakerInactive);\r\n\r\n        setLengthclicked(false);\r\n        setTempclicked(true);\r\n        setVolumeclicked(false);\r\n\r\n        setLengthStyle('length');\r\n        setTempStyle('temp-active');\r\n        setVolumeStyle('volume');\r\n\r\n        setFormStyle('tempUnits');\r\n\r\n    }\r\n\r\n    // Method to change background image state of Volume button when mouse enters\r\n    const hoverVolumeEnter = () => {\r\n        setVolumeBackground(beaker);\r\n    }\r\n\r\n    // Method to change background image state of Volume button when mouse exits\r\n    const hoverVolumeExit = () => {\r\n        if (volumeClicked === false) {\r\n            setVolumeBackground(beakerInactive)\r\n        }\r\n    }\r\n\r\n    // Method to manipulates diffrent states of Length, Temperature, Volume button when clicked on Volume button\r\n    const clickVolume = () => {\r\n        setLengthBackground(scaleInactive);\r\n        setTempBackground(hotInactive);\r\n        setVolumeBackground(beaker);\r\n\r\n        setLengthclicked(false);\r\n        setTempclicked(false);\r\n        setVolumeclicked(true);\r\n\r\n        setVolumeStyle('volume-active');\r\n        setLengthStyle('length');\r\n        setTempStyle('temp');\r\n\r\n        setFormStyle('volumeUnits');\r\n\r\n    }\r\n\r\n    // Method to change state of conversion unit array based on clicked state of specific button\r\n    let passOption = () => {\r\n        if (lengthClicked === true) {\r\n            setOptions(lengthOption);\r\n        }\r\n        if (tempClicked === true) {\r\n            setOptions(tempOption);\r\n        }\r\n        if (volumeClicked === true) {\r\n            setOptions(volumeOption);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"home\">\r\n            <TopBar className=\"home-topbar\" />\r\n            <div className=\"home-header\">\r\n                <span className=\"home-header-text\">Welcome To Quantity Measurement</span>\r\n            </div>\r\n            <div className=\"home-main\">\r\n                <div className=\"home-main--chooseType\">\r\n                    <span>Choose Type</span>\r\n                </div>\r\n                <div className=\"home-main--conversionType\">\r\n                    <ConversionType\r\n                        styleName={lengthStyle}\r\n                        image={lengthBackground}\r\n                        enter={hoverLengthEnter}\r\n                        click={clickLength}         \r\n                        exit={hoverLengthExit}\r\n                    >\r\n                        Length\r\n                    </ConversionType>\r\n\r\n                    <ConversionType\r\n                        styleName={tempStyle}\r\n                        image={tempBackground}\r\n                        enter={hoverTempEnter}\r\n                        click={clickTemp}\r\n                        exit={hoverTempExit}\r\n                    >\r\n                        Temperature\r\n                    </ConversionType>\r\n\r\n                    <ConversionType\r\n                        styleName={volumeStyle}\r\n                        image={volumeBackground}\r\n                        enter={hoverVolumeEnter}\r\n                        click={clickVolume}\r\n                        exit={hoverVolumeExit}\r\n                    >\r\n                        Volume\r\n                    </ConversionType>\r\n\r\n                </div>\r\n                <div className=\"home-main--conversion\">\r\n                    {useEffect(passOption)}\r\n                    <ConversionForm style={formStyle} options={optionsVal}></ConversionForm>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Home\r\n","import React, { Component } from 'react'\r\nimport TopBar from '../TopBar/TopBar'\r\nimport AxiosService from './../../services/axios_service'\r\nimport config from './../../config/config'\r\n\r\nimport './History.scss'\r\n\r\nconst axios = new AxiosService();\r\n\r\n\r\nexport default class History extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            History: [],\r\n        }\r\n    }\r\n    componentDidMount() {\r\n        this.history();\r\n    }\r\n    \r\n    history = () => {\r\n        axios.getAll(config.url).then((json) => {\r\n            this.setState({ History: json.data.data });\r\n        }).catch((err) => {\r\n            console.log(err);\r\n        })\r\n    }\r\n\r\n    temparray=[];\r\n    onCheck=(event,index)=>{\r\n            this.temparray.push(Number(event.target.value));\r\n            this.setState({isChecked:-1})    \r\n    }\r\n\r\n   delete=(arr)=>{\r\n       let inputData={\r\n           'IdForDeletion': arr\r\n       }\r\n       console.log(inputData);\r\n        axios.deleteMultiple(config.url,inputData).then((json) => {\r\n            if(json.data.success=== true){\r\n                this.history();\r\n            }\r\n            this.temparray=[];\r\n\r\n        }).catch((err) => {\r\n            console.log(err);\r\n\r\n        })\r\n   }\r\n\r\n    render() {\r\n        return (\r\n            <div className='home'>\r\n                <TopBar className='home-topbar'/>\r\n                <div className='home-header'>\r\n                    <span className=\"home-header-text\">Conversion History</span>\r\n                </div>\r\n                <div className=\"home-main\">\r\n                    \r\n                    <table className=\"table\">\r\n                        <tr className=\"table-header\">\r\n                            <th>Value</th>\r\n                            <th>Operation Type</th>\r\n                            <th>Result</th>\r\n                            <th className=\"deleteButton\" onClick={()=>{this.delete(this.temparray)}}>Delete</th>\r\n                        </tr>\r\n                        {\r\n                            this.state.History.map((d, index) => {\r\n                                return <tr className=\"table-row\">\r\n                                    <td>{d.value}</td>\r\n                                    <td>{d.operationType}</td>\r\n                                    <td>{d.result}</td>\r\n                                    <td  className=\"checkbox\">\r\n                                        <input type=\"checkbox\" key={d.id.toString()} value={d.id} onClick={(event,index)=>{\r\n                                            this.onCheck(event,index) \r\n                                        }}></input>\r\n                                    </td>\r\n                                </tr>      \r\n                                 })     \r\n                        }\r\n                    </table>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\n","import React, { Component } from 'react'\r\nimport { Router, Switch, Route } from 'react-router-dom'\r\n\r\nimport Home from './../components/Home/Home'\r\nimport History from './../components/History/History'\r\nimport history from './history'\r\n\r\nexport default class routes extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Router history={history}>\r\n                    <Switch>\r\n                        <Route path='/quanment' exact component={Home}/>\r\n                        <Route path='/History' component={History}/>\r\n                    </Switch>\r\n                </Router>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter as Router } from 'react-router-dom'\nimport Routes from './services/routes';\n\nReactDOM.render(\n  <Router>\n    <Routes />\n  </Router>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}